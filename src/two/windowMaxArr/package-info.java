package two.windowMaxArr;

/**
 * 有一个整型数组arr和一个大小为w的窗口从数组的最左边滑到最右边，窗口每次向右滑一个位置。
 * 例如：数组为[4, 3, 5, 4, 3, 3, 6, 7],窗口大小为3时：
 * 
 * 			[4, 3, 5], 4, 3, 3, 6, 7		窗口中最大值为5
 * 			4, [3, 5, 4], 3, 3, 6, 7		窗口中最大值为5
 * 			[4, 3, [5, 4, 3], 3, 6, 7		窗口中最大值为5
 * 			[4, 3, 5, [4, 3, 3], 6, 7		窗口中最大值为4
 * 			[4, 3, 5, 4, [3, 3, 6], 7		窗口中最大值为6
 * 			[4, 3, 5, 4, 3, [3, 6, 7]		窗口中最大值为7
 * 如果数组长度为n，窗口大小为w，则一共产生 n - w + 1 个窗口的最大值
 * 请实现一个函数。
 * 		输入：整数数组arr,窗口大小为w
 * 		输出：一个长度为 n - w + 1 的数组res,res[i]表示每一种窗口状态下的最大值。
 * 		时间复杂度要求为O(n)
 */
